import sys
import os
import numpy as np
from sklearn import svm



a=[]
b=[]


#training data 
model1=np.array([[-1.84,3.68],[-9.44,-21.67],[-8.4,-11.42],[-5.73,-9.03],[-4.14,-4.85],[-4.06,-2.7],[-4.91,-3.62],[-3.8,-5.86],[-4.85,-3.21],[-7.16,-8.86],[-2.04,-2.91],[-3.13,-7.31],[-6.15,-7.88],[-4.84,-4.24],[-2.27,-3.14],[-6.13,-8.46],[-2.05,-6.91],[-4.65,-8.71],[-4.7,-5.6],[-3.13,-1.13],[-2.76,5.06],[-4.38,-7.18],[-5.27,-6.77],[-1.92,-1.58],[-7.97,-8.74],[-4.62,-10.5],[-1.32,-0.88],[-6.2,-8.69],[-5.59,-7.93],[-9.09,-10.82],[-3.49,-2.88],[-5.23,-5.3],[-4.17,0.55],[-5.72,-6.29],[-6.16,-7.6],[-4.79,-6.67],[-3.8,-3.0],[-7.36,-10.39],[-8.8,-9.21],[-2.2,1.05],[-11.47,-17.19],[-8.16,-8.16],[-8.32,-10.49],[-1.98,-1.16],[-4.83,-7.9],[-5.51,-14.94],[-6.3,-12.34],[-3.68,-2.36],[-2.47,-3.59],[-4.31,3.65],[-8.37,-7.09],[0.42,6.08],[-7.53,-12.72],[-7.51,-8.02],[-6.02,-3.41],[-1.69,0.92],[-8.43,-15.53],[-6.8,-0.41],[-5.58,-6.08],[-4.04,-1.48],[-4.3,-6.71],[-7.6,-9.94],[-7.6,-9.94],[-4.64,-6.76],[-4.08,-0.57],[-3.6,-6.48],[-7.06,-9.39],[-7.92,-7.07],[-3.83,-6.01],[-8.16,-5.55],[-7.95,-12.87],[-6.25,-4.46],[-3.27,-10.98],[-3.96,2.83],[-7.47,-8.23],[-2.2,0.06],[-5.92,-4.53],[-4.12,-12.91],[-4.87,-4.11],[-6.31,-9.87],[-2.01,2.12],[0.3,-0.86],[-5.13,-9.29],[-5.72,-13.14],[-8.84,-15.08],[-4.04,-4.77],[-1.51,-2.48],[1.34,-0.28],[-1.18,-4.23],[-3.31,-3.65],[-1.32,1.66],[-6.43,-7.48],[-4.09,-4.06],[-8.18,-3.56],[-4.71,-6.58],[-4.14,-7.05],[-3.85,-7.89],[-4.65,-4.97],[-10.75,-11.49],[-5.56,-4.07],[-8.04,-8.36],[-2.76,-3.69],[-2.64,1.91],[-5.92,-7.7],[-2.12,3.66],[-5.1,-5.41],[-2.61,4.67],[-4.7,-3.4],[-3.77,-1.41],[-7.12,-8.95],[-7.36,-7.35],[-4.6,-2.24],[-0.33,-5.17],[1.29,0.63],[-2.59,-5.71],[-2.71,-1.22],[-6.17,-7.62],[-7.16,-10.61],[-2.86,-3.75],[-4.51,-5.89],[-3.33,-2.89],[-7.74,-4.87],[-8.75,-11.49],[-2.39,-7.43],[-3.05,-6.36],[-2.12,3.97],[-6.2,-8.88],[-1.9,-2.4],[-3.6,-4.87],[-4.63,-5.12],[-4.66,-3.46],[-3.37,-4.08],[-2.76,-9.61],[-2.24,-6.0],[-6.2,-12.74],[-2.16,-3.92],[-4.84,-7.89],[-7.6,-8.4],[-5.11,-3.62],[-4.77,-4.21],[-4.84,-3.87],[-4.63,-8.16],[-12.25,-13.37],[-10.17,-12.8],[-8.42,-11.59],[-5.29,-2.89],[-5.66,-3.49],[-5,-10.65],[-7.23,-9.62],[-4.84,-3.6],[-2.46,-1.88],[-9.63,-5.07],[-0.93,5.84],[-8.21,-10.48],[-7.12,-7.27],[-4.87,-15.75],[-7.51,-5.17],[-5.43,-5.9]])
model2=np.array([[-1.67,-4.84],[-10,-8.87],[-11.84,-10.86],[-2.22,-8.1],[-4.03,-6.19],[-8.19,-10.96],[-7.63,-9.68],[-14.39,-15.51],[-17.15,-17.3],[-5.51,-5.15],[-9.89,-14.54],[-14.82,-15.18],[-15.03,-14.85],[-8.91,-11.13],[-1.81,-5.93],[-3.11,-1.04],[-10.51,-12.13],[-9.19,-5.68],[-1.68,-2.53],[-0.83,1.62],[-11.76,-9.58],[-2.67,-0.75],[-8.36,-5.42],[-7.67,-5.99],[-1.91,-2.47],[-7.89,-7.4],[-0.75,4.99],[-9.86,-9.74],[-10.67,-10.42],[-0.93,0.95],[-6.07,-1.33]])
model3=np.array([[-5.28,-10.31],[-8.01,-5.55],[-4.31,-7.76],[-11.48,-17.68],[-6.83,-6.93],[-8.37,-12.17],[-3.11,-3.82],[-1.07,-4.44],[-14.22,-15.98],[-3.81,-2.39],[-1.58,-3.04],[-12.21,-15.41],[-5.81,-3.59],[-9.39,-6.26],[-2.49,-3.7],[-6.81,-5.58],[-5.54,-9.41],[-12.01,-12.52],[-4.73,-6.34],[-6.26,-5.56],[-2.73,-2.3],[-6.88,-8.07],[-11.09,-9.59],[-6.2,-8.87],[-5.31,-4.53],[-6.77,-7.91],[-11.93,-12.97],[-5.19,-4.09],[-7.37,-13.59],[-4.68,-5.3],[-6.17,-6.06],[-4.74,-4.06],[-9.3,-2.97],[-12.08,-12.53],[-7.2,-5.37],[-6.34,-7],[-5.01,-5.06],[-5.27,-9.06],[-6.73,-1.27],[-3.93,-5.05],[-16.45,-23.07],[-4.22,-4.72],[-3.71,0.09],[-3.66,-4.48],[-5.76,-5.41],[-3.45,-1.66],[-0.41,-5.42],[-5.06,0.76],[-6.02,-5.97],[-6.61,-5.93],[-3.73,-6.92],[-3.42,0.64],[-3.8,-8.6],[-4.27,-2.93],[-4.48,-5.19],[-3,-3.28],[-5,-2.4],[-6.56,-6.38],[-6.83,-7.99],[-11.06,-7.71],[-3.78,-1.09],[-3.43,-5.03],[-4.45,-5.22],[-4.04,-7.48],[-1.55,3.23],[-5.74,-10.34],[-9.37,-6.57],[-6.59,-6.1],[-9.12,-8.3],[-5.31,-5.7],[-6.3,-17.27],[-2.36,-6.24],[-9.57,-10.57],[-3.99,-6.17],[-2.65,-6.61],[-9.46,-16.91],[-11.35,-15.34],[-7.62,-10.82],[-3.45,-6.23],[-5.86,-3.89],[-4.09,-4.84],[-2.62,-0.87],[-6.34,-1.77],[-8.94,-10.18],[-12.47,-12.88],[-4.82,-6.88],[-8.13,-9.92],[-3.6,-5.63],[-4.68,-4.65],[-4.25,-6.86],[-4.68,-7.33],[-4.27,-1.77],[-4.57,-4.9],[-3.91,-2.65],[-5.34,-3.15],[-5.76,-4.28],[-6.07,-4.43],[-5.38,-11.07],[-4.05,-5.91],[-4.72,-6.75],[-2.86,3.06],[-3.21,-3.03],[-4.4,-1.75],[-3.5,-5.18],[-5.02,-0.8],[-6.12,-6.93],[-6.06,-7.98],[-4.44,-3.1],[-6.97,-8.66],[-2.4,2.47],[-7.97,-7.26],[-5.83,-7.84],[-4.36,-11.9],[-5.76,-7.7],[-1.44,-4.03],[-0.8,-4.23]])





if len(sys.argv) < 2 :
  print 'select one of the models : model1, model2, or model3'
  sys.exit(1)

if sys.argv[1] == 'model1' :
  train = model1 
elif sys.argv[1] == 'model2' :
  train = model2 
elif sys.argv[1] == 'model3' :
  train = model3
else :
  print 'select one of the models : model1, model2, or model3'
  sys.exit(1)

#predictive model construction
X_train = np.r_[model2]
clf = svm.OneClassSVM(nu=0.05, kernel="linear")
clf.fit(X_train)


#test data
if len(sys.argv) == 2 or not os.path.isfile(sys.argv[2]) :
  print 'cannot find input file'
  sys.exit(1)


f=open(sys.argv[2],'r')
fline = f.readline()
test=[]
while fline :
        fline = fline.strip()
        fso = fline.split('\t')
        instance=[]
        instance.append(float(fso[0]))
        instance.append(float(fso[1]))
        test.append(instance)
        fline = f.readline()
f.close()

X_test = np.r_[test]
predicted = clf.predict(X_test)


#output
g=open(sys.argv[1] + '_out.txt','w')
i=0
while i < len(predicted) :
  g.write(str(test[i][0]) + '\t' + str(test[i][1]))
  if predicted[i] == 1 :
    g.write('\t' + 'deleterious' + '\n')
  elif predicted[i] == -1 :
    g.write('\t' + 'benign' + '\n')
  i=i+1
g.close()


  







